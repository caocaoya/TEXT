C51 COMPILER V9.52.0.0   CURVE                                                             10/11/2019 09:21:57 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE CURVE
OBJECT MODULE PLACED IN .\Output\curve.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Code\curve.c LARGE OBJECTADVANCED OPTIMIZE(7,SPEED) BROWSE INCDIR(..\..\
                    -Include;.\head;.\Common) DEFINE(FOSC_160000) DEBUG PRINT(.\LST\curve.lst) TABS(2) OBJECT(.\Output\curve.obj)

line level    source

   1          
   2          #include "ALL_Includes.h"
   3          #if CURVE_MOTION_ENABLED
   4          
   5          // Hermite timing parameters.厄米特定时参数
   6           u16 curve_t0;
   7           u16 curve_t1;
   8           u16 curve_duration;
   9          static float curve_duration_float;
  10           u16 Curve_Delta=0;//曲线运动时间
  11           u16 Curve_Position=0;//曲线运动位置
  12           u16 Curve_In_Velocity=0;//曲线运动开始速度
  13           u16 Curve_Out_Velocity=0;//曲线运动结束速度
  14           
  15           u16 Curve_Reserved=0;
  16          // Hermite curve parameters.埃尔米特曲线参数
  17          float curve_p0;
  18          float curve_p1;
  19          float curve_v0;
  20          float curve_v1;
  21          
  22          //Hermite curve cubic polynomial coefficients.曲线三次多项式系数
  23          static float curve_a;
  24          static float curve_b;
  25          static float curve_c;
  26          static float curve_d;
  27          
  28          void curve_init(u16 t0, u16 t1, float p0, float p1, float v0, float v1)
  29          {
  30   1          // Set the time parameters.设置时间参数。
  31   1          curve_t0 = t0;
  32   1          curve_t1 = t1;
  33   1          curve_duration = t1 - t0;
  34   1          curve_duration_float = (float) curve_duration;
  35   1      
  36   1          // The tangents are expressed as slope of value/time.  The time span will
  37   1          // be normalized to 0.0 to 1.0 range so correct the tangents by scaling
  38   1          // them by the duration of the curve.
  39   1      //  斜率表示为值/时间。时间跨度将被归到0至1的范围内，正确的切线通过缩放曲线的持续时间。
  40   1          v0 *= curve_duration_float;
  41   1          v1 *= curve_duration_float;
  42   1      
  43   1          // Set the curve parameters.
  44   1          curve_p0 = p0;
  45   1          curve_p1 = p1;
  46   1          curve_v0 = v0;
  47   1          curve_v1 = v1;
  48   1      
  49   1          // Set the cubic coefficients by multiplying the matrix form of
  50   1          // the Hermite curve by the curve parameters p0, p1, v0 and v1.
  51   1          //
  52   1          // | a |   |  2  -2   1   1 |   |       p0       |
  53   1          // | b |   | -3   3  -2  -1 |   |       p1       |
  54   1          // | c | = |  0   0   1   0 | . | (t1 - t0) * v0 |
C51 COMPILER V9.52.0.0   CURVE                                                             10/11/2019 09:21:57 PAGE 2   

  55   1          // | d |   |  1   0   0   0 |   | (t1 - t0) * v1 |
  56   1          //
  57   1          // a = 2p0 - 2p1 + v0 + v1
  58   1          // b = -3p0 + 3p1 -2v0 - v1
  59   1          // c = v0
  60   1          // d = p0
  61   1      
  62   1          curve_a = (2.0 * p0) - (2.0 * p1) + v0 + v1;
  63   1          curve_b = -(3.0 * p0) + (3.0 * p1) - (2.0 * v0) - v1;
  64   1          curve_c = v0;
  65   1          curve_d = p0;
  66   1      }
  67          
  68          
  69          void curve_solve(u16 t, float *x, float *dx)
  70          {
  71   1          // Handle cases where t is outside and indise the curve.
  72   1          if (t <= curve_t0)
  73   1          {
  74   2              // Set x and in and out dx.
  75   2              *x = curve_p0;
  76   2              *dx = t < curve_t0 ? 0.0 : curve_v0;
  77   2          }
  78   1          else if (t >= curve_t1)
  79   1          {
  80   2              // Set x and in and out dx.
  81   2              *x = curve_p1;
  82   2              *dx = t > curve_t1 ? 0.0 : curve_v1;
  83   2          }
  84   1          else
  85   1          {
  86   2              // Subtract out the t0 value from t.
  87   2              float t1 = ((float) (t - curve_t0)) / curve_duration_float;
  88   2              float t2 = t1 * t1;
  89   2              float t3 = t2 * t1;
  90   2      
  91   2              // Determine the cubic polynomial.三次多项式的确定。
  92   2              // x = at^3 + bt^2 + ct + d
  93   2              *x = (curve_a * t3) + (curve_b * t2) + (curve_c * t1) + curve_d;
  94   2      
  95   2              // Determine the cubic polynomial derivative.求三次多项式导数
  96   2              // dx = 3at^2 + 2bt + c
  97   2              *dx = (3.0 * curve_a * t2) + (2.0 * curve_b * t1) + curve_c;
  98   2      
  99   2              // The time span has been normalized to 0.0 to 1.0 range so correct
 100   2              // the derivative to the duration of the curve.
 101   2      //         时间跨度被标准化到0到1范围，所以修正导数到曲线的持续时间。
 102   2              *dx /= curve_duration_float;
 103   2          }
 104   1      }
 105          
 106          #endif // CURVE_MOTION_ENABLED
 107          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1307    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     52      40
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
C51 COMPILER V9.52.0.0   CURVE                                                             10/11/2019 09:21:57 PAGE 3   

   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
