C51 COMPILER V9.52.0.0   PWM                                                               10/11/2019 09:21:58 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE PWM
OBJECT MODULE PLACED IN .\Output\PWM.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Code\PWM.C LARGE OBJECTADVANCED OPTIMIZE(7,SPEED) BROWSE INCDIR(..\..\In
                    -clude;.\head;.\Common) DEFINE(FOSC_160000) DEBUG PRINT(.\LST\PWM.lst) TABS(2) OBJECT(.\Output\PWM.obj)

line level    source

   1          
   2          #include "ALL_Includes.h"
   3          
   4          #define MAX_POSITION  (4095)
   5          
   6          
   7          // Determine the top value for timer/counter1 from the frequency divider.
   8          //确定来自分频器定时器峰值
   9          #define PWM_TOP_VALUE(div)      ((u16) div << 4) - 1
  10          // Determines the compare value associated with the duty cycle for timer/counter1.确定与占空比相关联的比较
             -值
  11          
  12          #define PWM_OCRN_VALUE(div,pwm) (u16) (((u32) pwm * (((u32) div << 4) - 1)) / 255)
  13          //#define PWM_OCRN_VALUE(div,pwm) (u16) ((u32) pwm * ((2500)) / 255)
  14          // Flags that indicate PWM output in A and B direction.
  15           u8 pwm_a=0;
  16           u8 pwm_b=0;
  17          
  18          // Pwm frequency divider value.PWM频率分频值
  19          static u16 pwm_div;
  20          
  21          
  22          #define DELAYLOOP 20 // TODO: This needs to be adjusted to account for the clock rate.
  23                               //       This value of 20 gives a 5 microsecond delay and was chosen
  24                               //       by experiment with an "MG995".
  25           static void delay_loop(int n)
  26          {
  27   1          u8 i;
  28   1          for(i=0; i<n; i++)
  29   1          {
  30   2      //        asm("nop");
  31   2            _nop_();
  32   2          }
  33   1      }
  34          
  35           void pwm_dir_a(u8 pwm_duty)
  36          // Send PWM signal for rotation with the indicated pwm ratio (0 - 255).
  37          // This function is meant to be called only by pwm_update.
  38          //发送PWM信号与指定的PWM占空比（0 - 255）旋转。
  39          //这个功能只有通过pwm_update调用。
  40          {
  41   1          // 确定定时器的占空比值
  42   1          u16 duty_cycle = PWM_OCRN_VALUE(pwm_div, pwm_duty);
  43   1      //    EA=0;
  44   1      //    // Do we need to reconfigure PWM output for direction A?
  45   1      //  我们需要重新配置PWM输出方向A吗？
  46   1          if (!pwm_a)
  47   1          { // Yes...
  48   2      
  49   2      //          PWM5_P03_OUTPUT_DISABLE;
  50   2      //          PWM4_P01_OUTPUT_DISABLE;
  51   2      //          PWM5=0;
  52   2      //          PWM4=0;
  53   2      //          delay_loop(DELAYLOOP);
C51 COMPILER V9.52.0.0   PWM                                                               10/11/2019 09:21:58 PAGE 2   

  54   2      //          PWM5_P03_OUTPUT_ENABLE;
  55   2                PWM5=1;
  56   2                PWM4=1;
  57   2                pwm_b = 0;
  58   2          }
  59   1      
  60   1          // Update the A direction flag.  A non-zero value keeps us from
  61   1          // recofiguring the PWM output A when it is already configured.
  62   1          pwm_a = pwm_duty;
  63   1      
  64   1      //set_SFRPAGE;
  65   1      //    PWM5H = duty_cycle>>8;
  66   1      //    PWM5L = duty_cycle;
  67   1      //    PWM4H = 0X00;
  68   1      //    PWM4L = 0X00;
  69   1      //clr_SFRPAGE;
  70   1      //    set_LOAD;
  71   1      //    set_PWMRUN;
  72   1      
  73   1      //     EA=1;
  74   1      
  75   1      }
  76          
  77          
  78           void pwm_dir_b(u8 pwm_duty)
  79          // Send PWM signal for rotation with the indicated pwm ratio (0 - 255).
  80          // This function is meant to be called only by pwm_update.
  81          {
  82   1          // Determine the duty cycle value for the timer.
  83   1          u16 duty_cycle = PWM_OCRN_VALUE(pwm_div, pwm_duty);
  84   1      //    EA=0;
  85   1          // Do we need to reconfigure PWM output for direction B?
  86   1          if (!pwm_b)
  87   1          {
  88   2      //          PWM5_P03_OUTPUT_DISABLE;
  89   2      //          PWM4_P01_OUTPUT_DISABLE;
  90   2      ////          PWM0_P12_OUTPUT_DISABLE;
  91   2      //          PWM5=0;
  92   2      //          PWM4=0;
  93   2      //          delay_loop(DELAYLOOP);
  94   2      //          PWM4_P01_OUTPUT_ENABLE;
  95   2                PWM5=1;
  96   2                PWM4=1;
  97   2                pwm_a = 0;
  98   2          }
  99   1          pwm_b = pwm_duty;
 100   1          
 101   1      //    set_SFRPAGE;
 102   1      //    PWM5H = 0x00; 
 103   1      //    PWM5L = 0x00;
 104   1      //    PWM4H = duty_cycle>>8;            
 105   1      //    PWM4L = duty_cycle;
 106   1      //clr_SFRPAGE;
 107   1      //    set_LOAD;
 108   1      //    set_PWMRUN;
 109   1      //    EA=1;
 110   1      
 111   1      }
 112          
 113          
 114          //void pwm_init(void)
 115          //// Initialize the PWM module for controlling a DC motor.
C51 COMPILER V9.52.0.0   PWM                                                               10/11/2019 09:21:58 PAGE 3   

 116          //{
 117          //    pwm_div = DEFAULT_PWM_FREQ_DIVIDER;
 118          
 119          //    PWM_IMDEPENDENT_MODE;
 120          //  
 121          //    PWM_GP_MODE_DISABLE;
 122          //    PWM_CLOCK_FSYS;
 123          //    PWM_CLOCK_DIV_64;
 124          //  
 125          //    PWMPH = PWM_TOP_VALUE(pwm_div)>>8;
 126          //    PWMPL = PWM_TOP_VALUE(pwm_div);
 127          //  
 128          //    set_SFRPAGE;                    // PWM4 and PWM5 duty value need set SFPPAGE 1
 129          //    PWM5H = 0x00;           
 130          //    PWM5L = 0x00;
 131          //    PWM4H = 0x00;           
 132          //    PWM4L = 0x00;
 133          //    clr_SFRPAGE;
 134          //    set_PNP4;//反向驱动
 135          //    set_PNP5;//反向驱动
 136          //    PWM4_P01_OUTPUT_ENABLE;
 137          //    PWM5_P03_OUTPUT_ENABLE;
 138          ////    pwm_dir_a(100);
 139          ////    pwm_dir_b(200);
 140          //    
 141          
 142          //    
 143          ////Please always setting Dead time before PWM run.   
 144          //    set_LOAD;
 145          //    set_PWMRUN;
 146          //// pwm_stop();  
 147          
 148          //}
 149          
 150          
 151          void pwm_update(u16 position, int16 pwm)
 152          // Update the PWM signal being sent to the motor.  The PWM value should be
 153          // a signed integer in the range of -255 to -1 for clockwise movement,
 154          // 1 to 255 for counter-clockwise movement or zero to stop all movement.
 155          // This function provides a sanity check against the servo position and
 156          // will prevent the servo from being driven past a minimum and maximum
 157          // position.
 158          //更新发送给电机的PWM信号。
 159          //PWM值应该是按顺时针方向移动的-255到-1范围内的带符号整数，
 160          //逆时针方向移动1到255，或零停止所有运动。
 161          //此函数提供了针对伺服位置的健全检查将防止伺服被驱动过一个最小值和最大值位置
 162          {
 163   1          u16 pwm_width;
 164   1          u16 min_position;
 165   1          u16 max_position;
 166   1      
 167   1      
 168   1          // Are we reversing the seek sense?我们是否颠倒了寻找的意义？
 169   1          if (Reverse_Seek != 0)
 170   1          {
 171   2              // Yes. Swap the minimum and maximum position.交换最小和最大位置
 172   2      
 173   2              // Get the minimum and maximum seek position.获取最小和最大查找位置
 174   2      //        min_position = registers_read_word(REG_MAX_SEEK_HI, REG_MAX_SEEK_LO);
 175   2      //        max_position = registers_read_word(REG_MIN_SEEK_HI, REG_MIN_SEEK_LO);
 176   2          min_position=minimum_position;
 177   2          max_position=maximum_position;
C51 COMPILER V9.52.0.0   PWM                                                               10/11/2019 09:21:58 PAGE 4   

 178   2              // Make sure these values are sane 10-bit values.
 179   2              if (min_position > MAX_POSITION)
 180   2                  min_position = MAX_POSITION;
 181   2              if (max_position > MAX_POSITION)
 182   2                  max_position = MAX_POSITION;
 183   2      
 184   2              // Adjust the values because of the reverse sense.
 185   2              min_position = MAX_POSITION - min_position;
 186   2              max_position = MAX_POSITION - max_position;
 187   2          }
 188   1          else
 189   1          {
 190   2              // No. Use the minimum and maximum position as is.
 191   2              // Get the minimum and maximum seek position.
 192   2      //        min_position = registers_read_word(REG_MIN_SEEK_HI, REG_MIN_SEEK_LO);
 193   2      //        max_position = registers_read_word(REG_MAX_SEEK_HI, REG_MAX_SEEK_LO);
 194   2                  min_position=minimum_position;
 195   2                  max_position=maximum_position;
 196   2              // Make sure these values are sane 10-bit values.
 197   2              if (min_position > MAX_POSITION)
 198   2                  min_position = MAX_POSITION;
 199   2              if (max_position > MAX_POSITION)
 200   2                  max_position = MAX_POSITION;
 201   2          }
 202   1      
 203   1          // Disable clockwise movements when position is below the minimum position.
 204   1          if ((position < min_position) && (pwm < 0)) pwm = 0;
 205   1      
 206   1          // Disable counter-clockwise movements when position is above the maximum position.
 207   1          if ((position > max_position) && (pwm > 0)) pwm = 0;
 208   1      
 209   1          if (pwm < 0)
 210   1          {
 211   2              // Less than zero. Turn clockwise.
 212   2              // Get the PWM width from the PWM value.
 213   2              pwm_width = (u16) -pwm;
 214   2      
 215   2              // Turn clockwise.
 216   2      #if SWAP_PWM_DIRECTION_ENABLED
 217   2              pwm_dir_b(pwm_width);
 218   2      #else
                      pwm_dir_a(pwm_width);
              #endif
 221   2          }
 222   1          else if (pwm > 0)
 223   1          {
 224   2              // More than zero. Turn counter-clockwise.
 225   2      
 226   2              // Get the PWM width from the PWM value.
 227   2              pwm_width = (u16) pwm;
 228   2      
 229   2              // Turn counter-clockwise.
 230   2      #if SWAP_PWM_DIRECTION_ENABLED
 231   2              pwm_dir_a(pwm_width);
 232   2      #else
                      pwm_dir_b(pwm_width);
              #endif
 235   2      
 236   2          }
 237   1          else
 238   1          {
 239   2              // Stop all PWM activity to the motor.
C51 COMPILER V9.52.0.0   PWM                                                               10/11/2019 09:21:58 PAGE 5   

 240   2              pwm_stop();
 241   2          }
 242   1      }
 243          
 244          
 245          void pwm_stop(void)
 246          // Stop all PWM signals to the motor.
 247          {
 248   1      //    // Disable interrupts.
 249   1      //      EA=0;
 250   1      //    // Are we moving in the A or B direction?
 251   1          if (pwm_a || pwm_b)
 252   1          {
 253   2      //    PWM5_P03_OUTPUT_DISABLE;
 254   2      //    PWM4_P01_OUTPUT_DISABLE;  
 255   2      
 256   2                 PWM5=1;
 257   2                 PWM4=1;
 258   2                 pwm_a = 0;
 259   2                 pwm_b = 0;
 260   2          }
 261   1      
 262   1      //    // Set the PWM duty cycle to zero.
 263   1      //    set_SFRPAGE;    
 264   1      //    PWM4H = 0x00; 
 265   1      //    PWM4L = 0x00;
 266   1      //    PWM5H = 0x00;           
 267   1      //    PWM5L = 0x00;
 268   1      //    clr_SFRPAGE;    
 269   1      //    clr_PWMRUN;
 270   1      //    // Restore interrupts.
 271   1      //     EA=1;
 272   1          // Save the pwm A and B duty values.
 273   1      //    registers_write_byte(REG_PWM_DIRA, pwm_a);
 274   1      //    registers_write_byte(REG_PWM_DIRB, pwm_b);
 275   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    722    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      4      14
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
