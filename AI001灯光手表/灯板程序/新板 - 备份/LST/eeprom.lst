C51 COMPILER V9.52.0.0   EEPROM                                                            10/28/2019 14:49:17 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE EEPROM
OBJECT MODULE PLACED IN ..\Output\eeprom.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\Code\eeprom.c LARGE OBJECTADVANCED OPTIMIZE(7,SPEED) BROWSE INCDIR(..
                    -\Common;..\head) DEFINE(FOSC_160000) DEBUG PRINT(..\LST\eeprom.lst) TABS(2) OBJECT(..\Output\eeprom.obj)

line level    source

   1          
   2          #include "ALL_Includes.h"
   3          
   4          #define  PAGE_ERASE_AP         0x22//页擦除命令（每一页是 128字节）
   5          #define  BYTE_PROGRAM_AP       0x21//字节写入命令
   6          #define  DATA_FLASH_ADDRESS    0X4000
   7          
   8          
   9          /****************************************
  10          关闭ISP
  11          *****************************************/
  12          void ISP_DIS(void)
  13          {
  14   1      TA = 0xAA;  //IAPUEN is TA protected
  15   1      TA = 0x55;
  16   1      IAPUEN &= ~0x01; //APUEN = 0, disable APROM update
  17   1      TA = 0xAA;  //CHPCON is TA protected
  18   1      TA = 0x55;
  19   1      CHPCON &= ~0x01; //IAPEN = 0, disable IAP mode
  20   1      }
  21          /****************************************
  22          关闭ISP
  23          *****************************************/
  24          void ISP_OPEN(void)
  25          {
  26   1      TA = 0xAA;  //CHPCON is TA protected
  27   1      TA = 0x55;
  28   1      CHPCON |= 0x01; //IAPEN = 1, enable IAP mode
  29   1      TA = 0xAA;  //IAPUEN is TA protected
  30   1      TA = 0x55;
  31   1      IAPUEN |= 0x01; //APUEN = 1, enable APROM update
  32   1      }
  33          /****************************************
  34          擦除扇区
  35          *****************************************/
  36          void ERASE(u16 addr)
  37          {
  38   1      ISP_OPEN();
  39   1      IAPCN = PAGE_ERASE_AP;  //Erase page 200h~27Fh
  40   1      IAPAH = addr>>8;
  41   1      IAPAL = addr;
  42   1      IAPFD = 0xFF;
  43   1      TA = 0xAA;  //IAPTRG is TA protected
  44   1      TA = 0x55;
  45   1      IAPTRG |= 0x01;  //write ‘1’ to IAPGO to trigger IAP process
  46   1      ISP_DIS();  
  47   1      }
  48          /****************************************
  49          读取一BYTE
  50          *****************************************/
  51          u8 Read_APROM_BYTE(u16 code *u16_addr)
  52          {
  53   1        u8 rdata;
  54   1        rdata = *u16_addr>>8;
C51 COMPILER V9.52.0.0   EEPROM                                                            10/28/2019 14:49:17 PAGE 2   

  55   1        return rdata;
  56   1      }
  57          /****************************************
  58          读取一DATA
  59          *****************************************/
  60          u16 ReadDATA_ISP(u16 bite_addr)
  61          {
  62   1        u16 DATA;
  63   1        u8 BITE;
  64   1        EA=0;
  65   1        BITE=Read_APROM_BYTE((u16 code *)bite_addr);
  66   1        DATA=Read_APROM_BYTE((u16 code *)(bite_addr+1));
  67   1        DATA=(DATA<<8)+BITE;
  68   1        EA=1;
  69   1        return DATA; 
  70   1      
  71   1      }
  72          
  73          /****************************************
  74          写入一BYTE
  75          *****************************************/
  76          void Write_ISP (u16 bite_addr,u8 DATA)
  77          { 
  78   1      ISP_OPEN();
  79   1      IAPCN = BYTE_PROGRAM_AP;  // Program 201h with 55h
  80   1      IAPAH = bite_addr >> 8;
  81   1      IAPAL = bite_addr;
  82   1      IAPFD = DATA;
  83   1      TA = 0xAA;
  84   1      TA = 0x55;
  85   1      IAPTRG |= 0x01;  //write ‘1’ to IAPGO to trigger IAP process
  86   1      ISP_DIS();  
  87   1      }
  88          /****************************************
  89          写入一DATA
  90          *****************************************/
  91          void WriteDATA_ISP (u16 bite_addr,u16 DATA)
  92          { 
  93   1        EA=0;
  94   1      //  ERASE(bite_addr);
  95   1        Write_ISP (bite_addr,DATA);
  96   1        Write_ISP (bite_addr+1,DATA>>8);
  97   1        EA=1;
  98   1      }
  99          void eeprom_read_block(u8 *Data_Buf,u16 bite_addr,u8 n)
 100          {
 101   1      u8 i=0;
 102   1      
 103   1        for(i=0;i<n;i++)
 104   1        {Data_Buf[i]=Read_APROM_BYTE((u16 code *)(DATA_FLASH_ADDRESS+bite_addr+i));}
 105   1      
 106   1      }
 107          void eeprom_write_block(u8 *Data_Buf,u16 bite_addr,u8 n)
 108          {u8 i=0;
 109   1        for(i=0;i<n;i++)
 110   1        {
 111   2          Write_ISP(DATA_FLASH_ADDRESS+bite_addr+i,*(Data_Buf+i));
 112   2        }
 113   1      
 114   1      }
 115          void writerom(unsigned int *Data_Buf,unsigned char n )
 116          {u8  dispLine;
C51 COMPILER V9.52.0.0   EEPROM                                                            10/28/2019 14:49:17 PAGE 3   

 117   1        ERASE(DATA_FLASH_ADDRESS);  
 118   1        for(dispLine=0;dispLine<n;dispLine++)
 119   1        {
 120   2          WriteDATA_ISP(DATA_FLASH_ADDRESS+2*dispLine,*(Data_Buf+dispLine));
 121   2        }
 122   1      }
 123          
 124          void readrom(unsigned int *Data_Buf,unsigned char n)
 125          { u16 i=0;
 126   1      
 127   1        for(i=0;i<n;i++)
 128   1        {Data_Buf[i]=ReadDATA_ISP((DATA_FLASH_ADDRESS+2*i));}
 129   1          }
 130          /***************************************************************
 131          * 函数功能：校验和
 132          * 输入参数：
 133          * 输出参数：
 134          ***************************************************************/
 135          static u8 eeprom_checksum(const u8 *buffer, size_t Size, u8 sum)
 136          {
 137   1          while (Size)
 138   1          {
 139   2              sum += *buffer;
 140   2              ++buffer;
 141   2              --Size;
 142   2          }
 143   1          return sum;
 144   1      }
 145          
 146          /***************************************************************
 147          * 函数功能：擦除eeprom
 148          * 输入参数：
 149          * 输出参数：
 150          ***************************************************************/
 151          u8 eeprom_erase(void)
 152          {
 153   1      ERASE(DATA_FLASH_ADDRESS);
 154   1          return 1;
 155   1      }
 156          
 157          
 158          u8 eeprom_restore_registers(void)
 159          {
 160   1          u8 header[2];
 161   1      
 162   1          // XXX Disable PWM to servo motor while reading registers.
 163   1      
 164   1          // Read EEPROM header which is the first two bytes of EEPROM.
 165   1          //    eeprom_read_block(&header[0], (void *) 0, 2);
 166   1           header[0]=Read_APROM_BYTE((u16 code *)DATA_FLASH_ADDRESS+0);
 167   1           header[1]=Read_APROM_BYTE((u16 code *)DATA_FLASH_ADDRESS+1);
 168   1          // Does the version match?
 169   1          if (header[0] != EEPROM_VERSION) return 0;
 170   1      
 171   1          // Read the write protected and redirect registers from EEPROM.
 172   1      //    eeprom_read_block(&registers[MIN_WRITE_PROTECT_REGISTER],2, WRITE_PROTECT_REGISTER_COUNT + REDIRECT_
             -REGISTER_COUNT);
 173   1      
 174   1          // Does the checksum match?
 175   1      //  Work_Address[5]
 176   1      //    if (header[1] != eeprom_checksum(Work_Address,5, EEPROM_VERSION))
 177   1      //      return 0;
C51 COMPILER V9.52.0.0   EEPROM                                                            10/28/2019 14:49:17 PAGE 4   

 178   1      
 179   1          // XXX Restore PWM to servo motor.
 180   1          // Return success.
 181   1          return 1;
 182   1      }
 183          
 184          
 185          u8 eeprom_save_registers(void)
 186          // Save registers to EEPROM.
 187          {
 188   1          u8 header[2];
 189   1      
 190   1          // XXX Disable PWM to servo motor while reading registers.
 191   1      
 192   1          // Fill in the EEPROM header.
 193   1          header[0] = EEPROM_VERSION;
 194   1      //    header[1] = eeprom_checksum(&registers[MIN_WRITE_PROTECT_REGISTER], WRITE_PROTECT_REGISTER_COUNT + R
             -EDIRECT_REGISTER_COUNT, EEPROM_VERSION);
 195   1          ERASE(DATA_FLASH_ADDRESS);
 196   1        
 197   1          // Write the EEPROM header which is the first two bytes of EEPROM.
 198   1          eeprom_write_block(&header[0], 0, 2);
 199   1      
 200   1          // Write the write protected and redirect registers from EEPROM.
 201   1      //    eeprom_write_block(&registers[MIN_WRITE_PROTECT_REGISTER], 2, WRITE_PROTECT_REGISTER_COUNT + REDIREC
             -T_REGISTER_COUNT);
 202   1      
 203   1          // XXX Restore PWM to servo motor.
 204   1      
 205   1          // Return success.
 206   1          return 1;
 207   1      }
 208          
 209          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    722    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      39
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
